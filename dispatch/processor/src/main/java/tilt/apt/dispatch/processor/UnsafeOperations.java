package tilt.apt.dispatch.processor;

import static tilt.apt.dispatch.processor.SafeOperations.asElement;
import static tilt.apt.dispatch.processor.SafeOperations.getSimpleName;

import java.util.Optional;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.ErrorType;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.SimpleTypeVisitor9;

final class UnsafeOperations {
  static TypeElement asTypeElement(final TypeMirror typeMirror) {
    final DeclaredType declaredType = asDeclaredType(typeMirror);
    if (declaredType == null) {
      return null;
    }
    return asElement(declaredType);
  }

  static DeclaredType asDeclaredType(final TypeMirror typeMirror) {
    return typeMirror.accept(
        new SimpleTypeVisitor9<DeclaredType, TypeMirror>() {
          @Override
          public DeclaredType visitDeclared(DeclaredType t, TypeMirror p) {
            return t;
          }

          @Override
          public DeclaredType visitError(ErrorType t, TypeMirror p) {
            return visitDeclared(t, p);
          }
        },
        typeMirror);
  }

  /**
   * Returns the direct superclass of this type element. If this type element represents an
   * interface or the class java.lang.Object, then null is returned.
   *
   * @return the direct superclass, or null if there is none
   */
  static TypeMirror getSuperclass(final TypeElement typeElement) {
    return asDeclaredType(typeElement.getSuperclass());
  }

  static final class ExistingSuperclassType extends SimpleTypeVisitor9<TypeMirror, Void> {
    static final ExistingSuperclassType INSTANCE = new ExistingSuperclassType();

    private ExistingSuperclassType() {}

    @Override
    public TypeMirror visitDeclared(DeclaredType t, Void p) {
      if (getSimpleName(t).endsWith(DispatchProcessor.SUFFIX_SUPERCLASS)
          && t.getTypeArguments().isEmpty() == false) {
        return t.getTypeArguments()
            .get(t.getTypeArguments().size() - 1)
            .accept(
                new SimpleTypeVisitor9<TypeMirror, Void>() {
                  @Override
                  public TypeMirror visitDeclared(DeclaredType t, Void p) {
                    return t;
                  }
                },
                null);
      }
      return t;
    }

    @Override
    public TypeMirror visitError(ErrorType t, Void p) {
      return visitDeclared(t, p);
    }
  }

  /**
   * Returns the direct superclass (that is not being generated by this processor) of this type
   * element. If this type element represents an interface or the class java.lang.Object, then a
   * null is returned.
   *
   * @return the direct superclass, or null if there is none
   */
  static TypeMirror getExistingSuperclass(TypeElement typeElement) {
    return Optional.ofNullable(getSuperclass(typeElement))
        .map(it -> it.accept(new ExistingSuperclassType(), null))
        .orElse(null);
  }
}
